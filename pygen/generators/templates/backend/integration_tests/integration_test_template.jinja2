import pytest
from flask import Flask
from app import create_app
from app.models import db
from app.models.{{ entity.name.lower() }} import {{ entity.name }}

@pytest.fixture(scope='module')
def test_client():
    """
    Fixture for setting up the Flask test client.
    """
    flask_app = create_app()
    flask_app.config['TESTING'] = True
    flask_app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test_integration.db'

    with flask_app.test_client() as testing_client:
        with flask_app.app_context():
            db.create_all()
            yield testing_client
        with flask_app.app_context():
            db.drop_all()

def test_create_{{ entity.name.lower() }}(test_client):
    """
    Test creating a new {{ entity.name }}.
    """
    payload = {
        # Replace with sample data for the entity
    }
    response = test_client.post('/api/{{ entity.name.lower() }}s', json=payload)
    assert response.status_code == 201
    assert response.json['id'] is not None

def test_get_{{ entity.name.lower() }}_list(test_client):
    """
    Test retrieving the list of {{ entity.name }} records.
    """
    response = test_client.get('/api/{{ entity.name.lower() }}s')
    assert response.status_code == 200
    assert isinstance(response.json, list)

def test_update_{{ entity.name.lower() }}(test_client):
    """
    Test updating an existing {{ entity.name }}.
    """
    # Replace with a valid ID after creation
    update_payload = {
        # Replace with updated sample data
    }
    response = test_client.put('/api/{{ entity.name.lower() }}s/1', json=update_payload)
    assert response.status_code == 200

def test_delete_{{ entity.name.lower() }}(test_client):
    """
    Test deleting an existing {{ entity.name }}.
    """
    response = test_client.delete('/api/{{ entity.name.lower() }}s/1')
    assert response.status_code == 204
