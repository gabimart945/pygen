from app.models import db
from app.models.{{ entity.name.lower() }} import {{ entity.name }}
from app.schemas.{{ entity.name.lower() }}_schema import {{ entity.name }}Schema
{% for relationship in entity.relationships %}
from app.models.{{ relationship.target.lower() }} import {{ relationship.target }}
from app.schemas.{{ relationship.target.lower() }}_schema import {{ relationship.target }}Schema
{% endfor %}

class {{ entity.name }}Service:
    def __init__(self):
        self._schema = {{ entity.name }}Schema()
        {% for relationship in entity.relationships %}
        self._{{ relationship.target.lower() }}_schema = {{ relationship.target }}Schema()
        {% endfor %}

    def get_all(self):
        items = {{ entity.name }}.query.all()
        return self._schema.dump(items, many=True)

    def get_by_id(self, id):
        item = {{ entity.name }}.query.get(id)
        return self._schema.dump(item) if item else None

    def create(self, data):
        """
        Creates a new record after validating and deserializing the input data.
        """
        loaded_data = self._schema.load(data)  # Validacion y deserializacion
        new_item = {{ entity.name }}(**loaded_data)
        db.session.add(new_item)
        db.session.commit()
        return self._schema.dump(new_item), None

    def update(self, id, data):
        """
        Updates an existing record after validating and deserializing the input data.
        """
        loaded_data = self._schema.load(data)  # Validacion y deserializacion
        item = {{ entity.name }}.query.get(id)
        if not item:
            return None, None
        for key, value in loaded_data.items():
            setattr(item, key, value)
        db.session.commit()
        return self._schema.dump(item), None

    def delete(self, id):
        """
        Deletes an existing record
        """
        item = {{ entity.name }}.query.get(id)
        if not item:
            return False
        db.session.delete(item)
        db.session.commit()
        return True

    {% for relationship in entity.relationships %}
    def get_{{ relationship.name.lower() }}s(self, id):
        """
        Retrieves related {{ relationship.target.lower() }} records.
        """
        item = {{ entity.name }}.query.get(id)
        if not item:
            return None, {'error': '{{ entity.name }} not found'}
        related_items = getattr(item, "{{ relationship.name }}")
        return self._{{ relationship.target.lower() }}_schema.dump(related_items, many={{ "True" if relationship.type in ["one-to-many", "many-to-many"] else "False" }}), None

    def add_{{ relationship.name.lower() }}(self, id, data):
        """
        Adds a related {{ relationship.target.lower() }} record.
        """
        parent = {{ entity.name }}.query.get(id)
        if not parent:
            return None, {'error': '{{ entity.name }} not found'}

        loaded_data = self._{{ relationship.target.lower() }}_schema.load(data)  # Validacion y deserializacion
        new_related_item = {{ relationship.target }}(**loaded_data)
        db.session.add(new_related_item)

        # AÃ±adir el nuevo elemento a la relacion
        if "{{ relationship.type }}" in ["one-to-many", "many-to-many"]:
            getattr(parent, "{{ relationship.name }}").append(new_related_item)
        elif "{{ relationship.type }}" in ["many-to-one", "one-to-one"]:
            setattr(parent, "{{ relationship.name }}", new_related_item)

        db.session.commit()
        return self._{{ relationship.target.lower() }}_schema.dump(new_related_item), None
    {% endfor %}
