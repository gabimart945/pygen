from marshmallow import Schema, fields, validate, validates_schema, ValidationError
import re

class {{ entity.name }}Schema(Schema):
    {% for field in entity.fields %}
    {% if field.name == "id" %}
    {{ field.name }} = fields.Integer(required=False)
    {% elif field.type == "db.String(255)" %}
    {{ field.name }} = fields.String(
        required={{ "True" if not field.nullable else "False" }},
        validate=validate.Length(min=1, max=255)
    )
    {% elif field.type == "db.Integer" %}
    {{ field.name }} = fields.Integer(
        required={{ "True" if not field.nullable else "False" }},
        validate=validate.Range(min=0)
    )
    {% elif field.type == "db.Date" %}
    {{ field.name }} = fields.Date(required={{ "True" if not field.nullable else "False" }})
    {% elif field.type == "db.DateTime" %}
    {{ field.name }} = fields.DateTime(required={{ "True" if not field.nullable else "False" }})
    {% endif %}
    {% endfor %}

    {% for relationship in entity.relationships %}
    {% if relationship.type in ["one-to-many", "many-to-many"] %}
    {{ relationship.name }} = fields.Nested(
        "{{ relationship.target }}Schema",
        many=True,
        exclude=("{{ entity.name.lower() }}",)
    )
    {% elif relationship.type in ["many-to-one", "one-to-one"] %}
    {{ relationship.name }} = fields.Nested(
        "{{ relationship.target }}Schema",
        exclude=("{{ relationship.back_populates.lower() }}",)
    )
    {% endif %}
    {% endfor %}

    @validates_schema(pass_many=True)
    def validate_sql_injection(self, data, many, **kwargs):
        """Validates input fields against SQL injection patterns."""
        sql_injection_pattern = r".*([';/*]).*"
        safe_pattern = r"^[a-zA-Z0-9 _-]+$"

        for field_name, value in (data.items() if isinstance(data, dict) else []):
            if isinstance(value, str):
                if re.match(sql_injection_pattern, value) and not re.match(safe_pattern, value):
                    raise ValidationError(f"Potential SQL injection detected in field '{field_name}'.")
