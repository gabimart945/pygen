from flask import Blueprint, request, jsonify
from app.services.{{ entity.name.lower() }}_service import {{ entity.name }}Service

{{ entity.name.lower() }}_bp = Blueprint('{{ entity.name.lower() }}_bp', __name__)
service = {{ entity.name }}Service()

# GET all records
@{{ entity.name.lower() }}_bp.route('/', methods=['GET'])
def get_all_{{ entity.name.lower() }}s():
    items = service.get_all()
    return jsonify(items), 200

# GET a single record by ID
@{{ entity.name.lower() }}_bp.route('/<int:id>', methods=['GET'])
def get_{{ entity.name.lower() }}(id):
    item = service.get_by_id(id)
    if not item:
        return jsonify({'error': '{{ entity.name }} not found'}), 404
    return jsonify(item), 200

# POST to create a new record
@{{ entity.name.lower() }}_bp.route('/', methods=['POST'])
def create_{{ entity.name.lower() }}():
    data = request.get_json()
    item, errors = service.create(data)
    if errors:
        return jsonify({'errors': errors}), 400
    return jsonify(item), 201

# PUT to update an existing record
@{{ entity.name.lower() }}_bp.route('/<int:id>', methods=['PUT'])
def update_{{ entity.name.lower() }}(id):
    data = request.get_json()
    item, errors = service.update(id, data)
    if errors:
        return jsonify({'errors': errors}), 400
    if not item:
        return jsonify({'error': '{{ entity.name }} not found'}), 404
    return jsonify(item), 200

# DELETE to remove a record
@{{ entity.name.lower() }}_bp.route('/<int:id>', methods=['DELETE'])
def delete_{{ entity.name.lower() }}(id):
    success = service.delete(id)
    if not success:
        return jsonify({'error': '{{ entity.name }} not found'}), 404
    return '', 204

{{% for relationship in entity.relationships %}
# GET related {{ relationship.name.lower() }} records
@{{ entity.name.lower() }}_bp.route('/<int:id>/{{ relationship.name.lower() }}{{ "" if relationship.name.lower().endswith("s") else "s" }}', methods=['GET'])
def get_{{ relationship.name.lower() }}s(id):
    items = service.get_{{ relationship.name }}s(id)
    if items is None:
        return jsonify({'error': '{{ entity.name }} not found'}), 404
    return jsonify(items), 200

# POST to add a related {{ relationship.target.lower() }}
@{{ entity.name.lower() }}_bp.route('/<int:id>/{{ relationship.name.lower() }}{{ "" if relationship.name.lower().endswith("s") else "s" }}', methods=['POST'])
def add_{{ relationship.name.lower() }}(id):
    data = request.get_json()
    item = service.add_{{ relationship.name }}(id, data)
    if not item:
        return jsonify({'error': 'Failed to add related item'}), 400
    return jsonify(item), 201
{% endfor %}
