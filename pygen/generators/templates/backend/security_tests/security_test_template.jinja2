import pytest
import requests

BASE_URL = "http://127.0.0.1:5000/api/{{ entity.name.lower() }}s"

def test_cors_headers():
    response = requests.options(BASE_URL)
    assert "Access-Control-Allow-Origin" in response.headers
    assert response.headers["Access-Control-Allow-Origin"] == "*"

def test_https_enforced():
    response = requests.get(BASE_URL)
    assert "Strict-Transport-Security" in response.headers

def test_sql_injection_protection():
    payload = {"id": "' OR '1'='1"}
    response = requests.post(BASE_URL, json=payload)
    assert response.status_code == 400  # Expecting bad request if properly handled

def test_xss_protection():
    response = requests.get(BASE_URL)
    assert "X-Content-Type-Options" in response.headers
    assert response.headers["X-Content-Type-Options"] == "nosniff"

# Add tests for each CRUD endpoint
def test_get_all_{{ entity.name.lower() }}s():
    response = requests.get(BASE_URL)
    assert response.status_code == 200
    assert isinstance(response.json(), list)

def test_create_{{ entity.name.lower() }}():
    payload = {"name": "Test"}
    response = requests.post(BASE_URL, json=payload)
    assert response.status_code == 201 or response.status_code == 400  # Validate input handling

def test_invalid_payload_{{ entity.name.lower() }}():
    payload = {"invalid_field": "Invalid"}
    response = requests.post(BASE_URL, json=payload)
    assert response.status_code == 400  # Validate rejection of invalid data
