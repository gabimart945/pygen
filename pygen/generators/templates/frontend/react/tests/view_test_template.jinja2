import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import axios from 'axios';
import {{ component.name }}View from '../views/{{ component.name }}View';

jest.mock('axios'); // Mock axios to avoid real HTTP requests

describe('{{ component.name }} View Tests', () => {
    it('renders the main view without crashing', () => {
        const mockData = [
            {
                {% for field in component.fields %}
                "{{ field.name }}": {{
                    '"example_' ~ loop.index ~ '"' if field.type == "text" else
                    loop.index * 10 if field.type == "number" else
                    '"2023-01-' ~ loop.index ~ '"' if field.type == "date" else
                    'true' if field.type == "checkbox" and loop.index % 2 == 0 else
                    'false' if field.type == "checkbox" else
                    '"unsupported"'
                }},
                {% endfor %}
            }
        ];
        axios.get.mockResolvedValueOnce({ data: mockData });
        render(<{{ component.name }}View />);
        expect(screen.getByText(/{{ component.name }} View/i)).toBeInTheDocument();
    });

    it('renders the main table', () => {
        const mockData = [
            {
                {% for field in component.fields %}
                "{{ field.name }}": {{
                    '"example_' ~ loop.index ~ '"' if field.type == "text" else
                    loop.index * 10 if field.type == "number" else
                    '"2023-01-' ~ loop.index ~ '"' if field.type == "date" else
                    'true' if field.type == "checkbox" and loop.index % 2 == 0 else
                    'false' if field.type == "checkbox" else
                    '"unsupported"'
                }},
                {% endfor %}
            }
        ];
        axios.get.mockResolvedValueOnce({ data: mockData });
        render(<{{ component.name }}View />);
        expect(screen.getByText(/Actions/i)).toBeInTheDocument();
    });


    it('opens the form modal on Add New click', () => {
        const mockData = [
            {
                {% for field in component.fields %}
                "{{ field.name }}": {{
                    '"example_' ~ loop.index ~ '"' if field.type == "text" else
                    loop.index * 10 if field.type == "number" else
                    '"2023-01-' ~ loop.index ~ '"' if field.type == "date" else
                    'true' if field.type == "checkbox" and loop.index % 2 == 0 else
                    'false' if field.type == "checkbox" else
                    '"unsupported"'
                }},
                {% endfor %}
            }
        ];
        axios.get.mockResolvedValueOnce({ data: mockData });
        render(<{{ component.name }}View />);
        fireEvent.click(screen.getByText(/Add New {{ component.name }}/i));
        expect(screen.getByText(/Create {{ component.name }}/i)).toBeInTheDocument();
    });

    {% for relationship in component.relationships %}
    it('renders related entity tabs for {{ relationship.target }}', () => {
        const mockData = [
            {
                {% for field in component.fields %}
                "{{ field.name }}": {{
                    '"example_' ~ loop.index ~ '"' if field.type == "text" else
                    loop.index * 10 if field.type == "number" else
                    '"2023-01-' ~ loop.index ~ '"' if field.type == "date" else
                    'true' if field.type == "checkbox" and loop.index % 2 == 0 else
                    'false' if field.type == "checkbox" else
                    '"unsupported"'
                }},
                {% endfor %}
            }
        ];
        axios.get.mockResolvedValueOnce({ data: mockData });
        render(<{{ component.name }}View />);
        expect(screen.getAllByText(/{{ relationship.target }}/i).length).toBeGreaterThan(1);
    });
    {% endfor %}

});
