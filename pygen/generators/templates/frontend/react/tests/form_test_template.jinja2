import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import api from "../api";
import {{ component.name }}Form from '../components/{{ component.name }}Form';

// Mockear Axios
jest.mock('axios', () => ({
    create: jest.fn(() => ({
        interceptors: {
            request: {
                use: jest.fn(), // Simula el mÃ©todo 'use' del interceptor
            },
        },
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
    })),
}));


jest.mock('../api'); // Mock axios to avoid real HTTP requests

describe('{{ component.name }}Form Component Tests', () => {
    it('renders loading state when fetching data', async () => {
        api.get.mockResolvedValueOnce({ data: { name: 'John Doe' } });

        render(<{{ component.name }}Form id={1} />);
        expect(screen.getByText(/Loading/i)).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByText(/Loading/i)).not.toBeInTheDocument();
        });
    });

    it('renders error state on API failure', async () => {
        api.get.mockRejectedValueOnce(new Error('Error fetching data'));

        render(<{{ component.name }}Form id={1} />);
        await waitFor(() => {
            expect(screen.getByText(/Error:/i)).toBeInTheDocument();
        });
    });

    it('updates form fields correctly', () => {
        render(<{{ component.name }}Form />);
        {% for field in component.fields %}
        const input{{ loop.index }} = screen.getByLabelText(/{{ field.name }}/i);
        fireEvent.change(input{{ loop.index }}, {
            target: {
                value: {{
                    '"Test Value"' if field.type == "text" else
                    42 if field.type == "number" else
                    '"2023-01-01"' if field.type == "date" else
                    'true' if field.type == "checkbox" else
                    '"Unsupported Value"'
                }}
            }
        });
        expect(input{{ loop.index }}.value).toBe({{
            '"Test Value"' if field.type == "text" else
            '42' if field.type == "number" else
            '"2023-01-01"' if field.type == "date" else
            'true' if field.type == "checkbox" else
            '"Unsupported Value"'
        }});
        {% endfor %}
    });


    it('submits the form with correct data', async () => {
        api.post.mockResolvedValueOnce({ data: { id: 1 } });
        const mockOnSuccess = jest.fn();

        render(<{{ component.name }}Form onSuccess={mockOnSuccess} />);
        {% for field in component.fields %}
        const input{{ loop.index }} = screen.getByLabelText(/{{ field.name }}/i);
        fireEvent.change(input{{ loop.index }}, { target: { value: 'Test Value {{ loop.index }}' } });
        {% endfor %}

        fireEvent.click(screen.getByText(/Create/i));

        await waitFor(() => {
            expect(mockOnSuccess).toHaveBeenCalled();
        });
    });

    /*
    it('handles update correctly', async () => {
        const mockData = [
            {
                {% for field in component.fields %}
                "{{ field.name }}": {{
                    '"example_' ~ loop.index ~ '"' if field.type == "text" else
                    loop.index * 10 if field.type == "number" else
                    '"2023-01-2"' if field.type == "date" else
                    'true' if field.type == "checkbox" and loop.index % 2 == 0 else
                    'false' if field.type == "checkbox" else
                    '"unsupported"'
                }},
                {% endfor %}
            },
        ];
        api.get.mockResolvedValueOnce({ data: mockData });
        api.put.mockResolvedValueOnce({ data: { id: 1 } });
        const mockOnSuccess = jest.fn();

        render(<{{ component.name }}Form id={1} onSuccess={mockOnSuccess} />);
        {% for field in component.fields %}
        const input{{ loop.index }} = screen.getByLabelText(/{{ field.name }}/i);
        fireEvent.change(input{{ loop.index }}, { target: { value: 'Updated Value {{ loop.index }}' } });
        {% endfor %}

        fireEvent.click(screen.getByText(/Update/i));

        await waitFor(() => {
            expect(mockOnSuccess).toHaveBeenCalled();
        });
    });
    */
});
